C51 COMPILER V9.53.0.0   NRF24L01_SENDER                                                   07/20/2016 14:44:22 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NRF24L01_SENDER
OBJECT MODULE PLACED IN NRF24L01_Sender.obj
COMPILER INVOKED BY: C:\Keil_MDK\C51\BIN\C51.EXE NRF24L01__Sender\NRF24L01_Sender.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\de
                    -lay;.\uart;.\NRF24L01__Sender;.\nine_key;.\HandSignal) DEBUG OBJECTEXTEND PRINT(.\NRF24L01_Sender.lst) TABS(2) OBJECT(NR
                    -F24L01_Sender.obj)

line level    source

   1          /*
   2          Ê±¼ä£º2015/11/29
   3          ¹¦ÄÜ£ºÊµÏÖ·¢ËÍÊı¾İ¹¦ÄÜ,Ö÷»úÉÏ
   4          ×÷Õß£ºÕÅÌìÀÖ
   5          */
   6          #include "AllFunc.h"
   7          #include "NRF24L01_Sender.h"
   8          
   9          
  10          sbit CE   = P1^0;  //RX/TXÄ£Ê½Ñ¡Ôñ¶Ë
  11          sbit SCK  = P1^1; //SPIÊ±ÖÓ¶Ë
  12          sbit MISO = P1^2; //SPIÖ÷»úÊä³ö´Ó»úÊä³ö¶Ë
  13          sbit CSN  = P1^3; //SPIÆ¬Ñ¡¶Ë//¾ÍÊÇSS£¬µÍµçÆ½ÓĞĞ§
  14          sbit MOSI = P1^4; //SPIÖ÷»úÊä³ö´Ó»úÊäÈë¶Ë
  15          sbit IRQ  = P1^5; //¿ÉÆÁ±ÎÖĞ¶Ï¶Ë£¬µÍµçÆ½Ê¹ÄÜ
  16          
  17          unsigned char  code TxAddr[]={0x34,0x43,0x10,0x10,0x01};//·¢ËÍµØÖ·
  18          unsigned char  code RxAddr[]={0x34,0x43,0x10,0x10,0x01};//½ÓÊÕµØÖ·£¬±£³ÖºÍ·¢ËÍµØÖ·ÏàÍ¬
  19          
  20          /*×´Ì¬¼Ä´æÆ÷µÄ4 5 6Î»£¬Ïê¼ûÖĞÎÄÊÖ²áP17*/
  21          unsigned char bdata sta;   //×´Ì¬±êÖ¾£¬bdataÊÇÔÊĞí¶ÔÒ»¸ö°ËÎ»µÄÊı¾İ£¬ÈçstaµÄÃ¿Ò»Î»½øĞĞ²Ù×÷£¬Ïàµ±ÈçIO¿Ú
  22          sbit RX_DR=sta^6;//½ÓÊÕÊı¾İÖĞ¶Ï£¬µ±½ÓÊÕµ½ÓĞĞ§Êı¾İºóÖÃÒ»£¬Ğ´1Çå³ıÖĞ¶Ï
  23          sbit TX_DS=sta^5;//·¢ËÍÊı¾İÖĞ¶Ï£¬×Ô¶¯¹¤×÷·½Ê½ÏÂ£¬Ö»ÓĞµ±ÊÕµ½Ó¦´ğĞÅºÅÒÔºó´ËÎ»²ÅÎª1£¬Ğ´1Çå³ıÖĞ¶Ï
  24          sbit MAX_RT=sta^4;//´ïµ½×î¶à´ÎÖØ·¢ÖĞ¶Ï£¬Èç¹ûËüµÄÖĞ¶Ï²úÉú£¬ÔòĞèÒªÇå³ıºó£¬ÏµÍ³²ÅÄÜ½øĞĞÍ¨Ñ¶
  25          
  26          
  27          //¶ÔÓÚNRF24L01µÄ³õÊ¼»¯²Ù×÷£¬Ê¹Æä³õÊ¼Ê±´¦ÓÚ´ı»úÄ£Ê½1×´Ì¬
  28          void NRF24L01_Init()
  29          {
  30   1          delay_ms(50);
  31   1          CE = 0;//ÉèÖÃÎª´ı»úÄ£Ê½£¬Î´¿ªÊ¼´«ÊäÊı¾İ
  32   1          CSN = 1;//Î´Ê¹ÄÜÄ£¿é
  33   1          SCK = 0;//½«Ê±ÖÓÀ­µÍ
  34   1          IRQ = 1;//ÖĞ¶ÏÎ»ÆÁ±Î
  35   1      }
  36          
  37          /*Ö÷»úÏòÄ£¿éNRF24L01·¢ËÍÊı¾İ*/
  38          //Ê¹ÓÃSPI×ÜÏß½øĞĞµÄÊı¾İ½»»»£¬MOSIÖĞ·ÅÖ÷»úÊä³öµÄÎ»£¬MISOÖĞ·Å´Ó»úÊäÈëµ½Ö÷»úµÄÎ»
  39          unsigned char SPI_ExchangeData(unsigned char bufdata)
  40          {
  41   1          unsigned char i = 0;
  42   1          //SCK = 0;             //½øÀ´Ê×ÏÈ°ÑSCKÖÃÎª0£¬Âú×ãµÚÒ»´ÎÌø±ä
  43   1          for(i = 0;i < 8;i ++)//´Ó¸ßÎ»¿ªÊ¼´«Êä£¡£¡
  44   1          {
  45   2              //ÅĞ¶Ï×î¸ßÎ»ÎªÁãÎªÒ»
  46   2              MOSI = bufdata & 0x80;
  47   2              bufdata <<= 1;//bufdata¿Õ³ö×îµÍÎ»
  48   2              SCK = 1;//¸ßµçÆ½µ½À´£¬MOSIÖĞÊı¾İ±»ËÍ³ö
  49   2              bufdata |= MISO;        
  50   2              SCK = 0;//ÏÂ½µÑØµ½À´£¬MISOÖĞÊı¾İÎª´Ó»ú·¢ËÍ¹ıÀ´µÄ
  51   2          }
  52   1          return bufdata;//½«´Ó»ú·¢À´µÄ°ËÎ»Êı¾İ·µ»Ø
  53   1      }
C51 COMPILER V9.53.0.0   NRF24L01_SENDER                                                   07/20/2016 14:44:22 PAGE 2   

  54          
  55          /*
  56          Ë¼Ïë£ºÕâ¸öº¯ÊıÓÃÀ´¶ÁÈ¡NRFÖĞÄ³¸ö¼Ä´æÆ÷ÖĞµÄÒ»¸ö×Ö½ÚÊı¾İ£¬
  57          ¶ø¶ÁÈ¡µÄ»°£¬ÓĞÒ»¸öSPIÖ¸Áî£¬×¨ÃÅ¶ÁÈ¡¼Ä´æÆ÷µÄ£¬¸ñÊ½Read_cmd = 0x00 + ĞèÒª¶ÁÈ¡µÄ¼Ä´æÆ÷µØÖ·
  58          Ïê¼ûÖĞÎÄÊÖ²áP13
  59          */
  60          //SPI×ÜÏß£¬¶ÁNRFÖĞ¼Ä´æÆ÷ÖĞÒ»¸ö×Ö½ÚµÄÊı¾İ
  61          unsigned char SPI_Read_NRF(unsigned char Read_cmd)//¸Ã Read_cmd = 0x00 + ĞèÒª¶ÁÈ¡µÄ¼Ä´æÆ÷µØÖ·
  62          {
  63   1          unsigned char readData;
  64   1          CSN = 0;//Ä£¿éÊ¹ÄÜÓĞĞ§
  65   1          SPI_ExchangeData(Read_cmd);//Ğ´ÈëSPIÃüÁî£¬¸ñÊ½ 000A AAAA£¬¼´°Ñ0x00 + AddrĞ´Èë£¬ËµÃ÷£º½Ó×ÅÒª¶ÁÈ¡Õâ¸ö¼Ä´æ
             -Æ÷ÖĞÄÚÈİÁË
  66   1          readData = SPI_ExchangeData(0x00);//¿ªÊ¼½»»»Êı¾İ£¬Êµ¼ÊÊÇµ¥Ïò¶ÁÈ¡¼Ä´æÆ÷Êı¾İ£¬ÒòÎªÎÒÖ»ĞèÒª¶ÁÈ¡ÄãµÄÖµ£¬ËùÒ
             -ÔÎÒ·¢0x00Ò²¾Í¿ÉÒÔÁË
  67   1          CSN = 1;
  68   1        
  69   1          return readData;
  70   1      }
  71          
  72          
  73          //SPI×ÜÏß£¬Ğ´Êı¾İµ½NRFµÄ¼Ä´æÆ÷ÖĞ£¬Êı¾İÎªwr_value£¬³¤¶ÈÎªÒ»×Ö½Ú
  74          unsigned char SPI_Write_NRF(unsigned char Write_cmd,unsigned char wr_value)
  75          {
  76   1          unsigned char statue;
  77   1          CSN = 0;
  78   1          statue = SPI_ExchangeData(Write_cmd);//Ê×ÏÈ°ÑĞ´ÃüÁîÍ¨¹ıSPIĞ´Èëµ½NRFÖĞ
  79   1          SPI_ExchangeData(wr_value);//½ô½Ó×Å¾ÍĞ´ÈëÊı¾İ
  80   1          CSN = 1;
  81   1        
  82   1          return statue; //·µ»Ø×´Ì¬×Ö£¬ÓÃÓÚÅĞ¶ÏÊÇ·ñÕıÈ·´«ÊäÁË*ÓĞ´ıÑéÖ¤*
  83   1      }
  84          
  85          
  86          
  87          //Ê¹ÓÃSPI£¬¶ÔRXFIFO¼Ä´æÆ÷µÄÖµ½øĞĞÁ¬ĞøµÄ¶ÁÈ¡£¬¶ÁÈ¡ÍêÒÔºó£¬¸Ã¼Ä´æÆ÷ÄÚÈİ±»Çå¿Õ
  88          unsigned char SPI_Read_RxFIFO(unsigned char Read_cmd,unsigned char *RxData,unsigned char DataLen)
  89          {
  90   1          unsigned char status;
  91   1          unsigned char i = 0;
  92   1          CSN = 0;
  93   1          status = SPI_ExchangeData(Read_cmd);
  94   1          for(i = 0;i < DataLen;i ++)//¶ÔÄ³¸ö¼Ä´æÆ÷½øĞĞÁ¬ĞøµÄ¶ÁÈ¡£¬¶ÁÈ¡³¤¶ÈÎªDataLen£¬¶ÁÈ¡µ½µÄÊı¾İÔÚRxDataÖĞ
  95   1          {
  96   2              RxData[i] = SPI_ExchangeData(0x00);
  97   2          }
  98   1          CSN = 1;
  99   1          
 100   1          return status;
 101   1      }
 102          
 103          //Ê¹ÓÃSPI£¬¶ÔTXFIFO¼Ä´æÆ÷½øĞĞĞ´²Ù×÷£¬Ğ´ÈëÊı¾İÎªTxDataÖĞÊı¾İ£¬³¤¶ÈÎªDataLen
 104          unsigned char SPI_Write_TxFIFO(unsigned char Write_cmd,unsigned char *TxData,unsigned char DataLen)
 105          {
 106   1          unsigned char status;
 107   1          unsigned char i = 0;
 108   1          CSN = 0;
 109   1          status = SPI_ExchangeData(Write_cmd);
 110   1        
 111   1      
 112   1          for(i = 0;i < DataLen;i ++)
 113   1          {
C51 COMPILER V9.53.0.0   NRF24L01_SENDER                                                   07/20/2016 14:44:22 PAGE 3   

 114   2              SPI_ExchangeData(*TxData ++);
 115   2          }
 116   1          CSN = 1;
 117   1          
 118   1          return status;
 119   1      
 120   1      }
 121          
 122          /*
 123          ÉèÖÃNRFµÄ¹¤×÷·½Ê½£¬ÉèÖÃÎª·¢ËÍ·½Ê½
 124          */
 125          void SetNRF_SendDataMode(unsigned char *TxData)
 126          {
 127   1          CE = 0;//Ê×ÏÈÊ¹Ä£¿é½øÈë´ı»úÄ£Ê½£¬ÕâÑù¿ÉÒÔÉèÖÃNRFµÄ¹¤×÷×´Ì¬
 128   1          /*Ê×ÏÈÅäÖÃ·¢ËÍµØÖ·£¬ĞèÒªĞ´ÃüÁîµ½·¢ËÍµØÖ·¼Ä´æÆ÷ÖĞ£¬È»ºóĞ´ÈëµØÖ·£¬ÔÙĞ´ÈëµØÖ·µÄ¿í¶È
 129   1          ²ÎÊıÒ»:Ğ´¼Ä´æÆ÷£¬Ğ´Èëµ½·¢ËÍµØÖ·¼Ä´æÆ÷£¬±íÊ¾Òª¶ÔÆä²Ù×÷
 130   1          ²ÎÊı¶ş£ºĞ´ÈëµØÖ·£¬ÊÕ·¢µØÖ·ÏàÍ¬
 131   1          ²ÎÊıÈı£ºĞ´ÈëµÄµØÖ·³¤¶È£¬Îª5¸ö×Ö½Ú³¤¶È
 132   1          */
 133   1          SPI_Write_TxFIFO(W_REGISTER + TX_ADDR, TxAddr, TX_ADDR_WITDH);
 134   1          /*NRFÔÚ
 135   1          È»ºóĞ´ÈëĞèÒªÊ¹ÓÃ0Í¨µÀ×÷Îª½ÓÊÕ¶ËµÄÓ¦´ğÍ¨µÀ£¬½ÓÊÕ¶ËÔÚ½ÓÊÕµ½Êı¾İºó£¬¼ÇÂ¼¸ÃµØÖ·£¬È»ºóÍ¨¹ı0Í¨µÀ»Ø¸´Ó¦´ğ£¬
 136   1          ËùÒÔ£¬0Í¨µÀµÄµØÖ·ĞèÒªºÍ·¢ËÍ¶ËµÄ·¢ËÍµØÖ·ÏàÍ¬£¬ÕâÑù²ÅÄÜ±£Ö¤½ÓÊÕµ½½ÓÊÕ·½·¢À´µÄÓ¦´ğĞÅºÅ
 137   1          ²ÎÊıÒ»£ºĞ´¼Ä´æÆ÷£¬Ğ´Èëµ½Í¨µÀ0¼Ä´æÆ÷ÖĞ
 138   1          ²ÎÊı¶ş£ºĞ´ÈëÍ¨µÀ0µÄµØÖ·£¬µØÖ·ºÍ·¢ËÍ¶ËµØÖ·ÏàÍ¬£¬±£Ö¤½ÓÊÕµ½Ó¦´ğĞÅºÅ
 139   1          ²ÎÊıÈı£ºµØÖ·³¤¶È£¬Îª5¸ö×Ö½Ú³¤¶È
 140   1          */  
 141   1          SPI_Write_TxFIFO(W_REGISTER + RX_ADDR_P0, TxAddr, TX_ADDR_WITDH);
 142   1          /*½ô½Ó×Å¿ÉÒÔ¿ªÊ¼Ğ´ÈëÊı¾İÁË
 143   1          ²ÎÊıÒ»£º»¹ÊÇĞ´¼Ä´æÆ÷£¬Ğ´Èëµ½Ğ´¼Ä´æÆ÷ÖĞ£¬±íÊ¾¿ªÊ¼Ğ´Êı¾İÁË
 144   1          ²ÎÊı¶ş£ºĞèÒªĞ´ÈëµÄÊı¾İ
 145   1          ²ÎÊıÈı£ºĞèÒªĞ´ÈëµÄÊı¾İ³¤¶È£¬³¤¶ÈÎª4¸ö×Ö½Ú
 146   1          */
 147   1          SPI_Write_TxFIFO(W_TX_PAYLOAD,TxData,TX_DATA_WITDH);
 148   1          /*½ÓÏÂÀ´ĞèÒªÅäÖÃ¸÷¸ö¼Ä´æÆ÷£¬±ÈÈçÓ¦´ğ·½Ê½µÈ£¬Ö÷ÒªÅäÖÃÍ·¿ªÊ¼µÄÁù¸ö¼Ä´æÆ÷*/
 149   1          //Í¨¹ıĞ´Ò»¸ö×Ö½Ú¾Í¿ÉÒÔÉèÖÃ¸÷¸ö¼Ä´æÆ÷£¬ËùÒÔ²»Ê¹ÓÃSPI_Write_TxFIFO£¨£©£»º¯Êı
 150   1          SPI_Write_NRF(W_REGISTER + EN_AA, 0x01);//Ê¹ÄÜÍ¨µÀ0£¬Í¨µÀ0×Ô¶¯Ó¦´ğÔÊĞí£¬ÒªÊÇ²»ĞèÒª×Ô¶¯Ó¦´ğ£¬ÔòÖÃ0x00
 151   1          SPI_Write_NRF(W_REGISTER + EN_RXADDR, 0x01);//ÔÊĞíÍ¨µÀ0
 152   1          
 153   1          //SPI_Write_NRF(W_REGISTER + SETUP_AW, TX_DATA_WITDH);
 154   1          
 155   1          SPI_Write_NRF(W_REGISTER + SETUP_RETR, 0x1a);//ÉèÖÃ×Ô¶¯ÖØ·¢£¬,×Ô¶¯ÖØ·¢Ê®Áù´Î
 156   1          SPI_Write_NRF(W_REGISTER + RF_CH, 0x00);//ÉèÖÃÍ¨µÀÆµÂÊÊÇ0£¡£¡£¡
 157   1          SPI_Write_NRF(W_REGISTER + RF_SETUP, 0x07);//ÉäÆµ¼Ä´æÆ÷Ê¹ÓÃ000 0 11 1£¬²ÉÓÃ1Mbps  0dBm,
 158   1          SPI_Write_NRF(W_REGISTER + CONFIG, 0x0e);//ÉèÖÃCRC¼ìÑéÊ¹ÄÜÓĞĞ§£¬Ê®ÁùÎ»iCRCĞ£Ñé£¬ÉÏµç£¬·¢ÉäÄ£Ê½
 159   1          
 160   1          CE = 1;
 161   1          
 162   1          delay_us(10);//±ØĞëÑÓ³Ù10usÒÔÉÏ£¬ÏÖÔÚÕâÀïÑÓÊ±ÁË15us
 163   1          
 164   1      }
 165          
 166          //½ÓÊÕÊı¾İº¯Êı£¬ÒòÎªÊÇ½ÓÊÕ£¬ËùÒÔÒ²²»ĞèÒªÈÎºÎ²ÎÊı
 167          
 168          
 169          
 170          
 171          /*¼ì²âÓ¦´ğ£¬ÕâÊÇ¶ÔÓÚ·¢ËÍ·½¶øÑÔ£¬ÒòÎª·¢ËÍ·½ĞèÒª¼ì²âÊÇ·ñ½ÓÊÜ·½½ÓÊÕµ½ÁËÓĞĞ§Êı¾İ*/
 172          //Èç¹û·µ»Ø0£¬ÔòËµÃ÷ÓĞÓ¦´ğ
 173          unsigned char CheckAck()
 174          {
 175   1          /*²âÊÔ½×¶ÎÌí¼ÓÔÚ·¢ËÍº¯ÊıÖĞµÄÄÚÈİ£¬ÅĞ¶ÏÊÇ·ñ·¢ËÍ³É¹¦£¬µ¥´¿µÄµ÷ÊÔ·¢ËÍ¶ËµÄ²âÊÔ²¿·Ö£¬ÕûºÏÒÔºó×îºÃÉ¾³ı£¬ÓÃChe
C51 COMPILER V9.53.0.0   NRF24L01_SENDER                                                   07/20/2016 14:44:22 PAGE 4   

             -ckº¯Êı*/
 176   1          //ĞÂÌí¼Ó£¬±íÊ¾·¢ËÍ³É¹¦
 177   1          sta = SPI_Read_NRF(R_REGISTER + STATUS);
 178   1        
 179   1          //ÓÉÓÚ·¢ËÍÍêÊı¾İ»òÕß×Ô¶¯ÖØ·¢´ÎÊı´ïµ½×î´óÖµÊ±£¬¶ÔÓ¦Î»»á±»ÖÃÒ»
 180   1          if((TX_DS == 1) || (MAX_RT == 1))
 181   1          {
 182   2              //uart_sendbyte(sta);
 183   2              //ĞèÒª½øĞĞÇå¿ÕÖĞ¶ÏÎ»£¬ÊÖ²áÖĞËµ£¬ÖÃÒ»Çå³ıÖĞ¶Ï£¬ËùÒÔ¿ÉÒÔÈ«²¿ÖÃÒ»£¬ÓÃÀ´Çå¿ÕÕâÈıÎ» 
 184   2              SPI_Write_NRF(W_REGISTER + STATUS, 0xff);
 185   2              CSN = 0;//Æ¬Ñ¡Ğ¾Æ¬
 186   2              //Çå³ıTXFIFO¼Ä´æÆ÷,±£Ö¤Êı¾İµÄÕıÈ·ĞÔ
 187   2              SPI_ExchangeData(FLUSH_TX);
 188   2              CSN = 1;//Æ¬Ñ¡Ê¹ÄÜÎŞĞ§
 189   2              return 0;
 190   2          }
 191   1          else
 192   1          {
 193   2              return 1;
 194   2          }
 195   1      }
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          
 207          
 208          void SetNRF_ReceiveDataMode()
 209          {
 210   1          CE = 0;
 211   1          //²ÎÊıÒ»£ºĞ´ÈëÃüÁîµ½Í¨µÀ0½ÓÊÕ¼Ä´æÆ÷ÖĞ£¬Ê¹ÓÃµÄµØÖ·ºÍ·¢ËÍµØÖ·ÏàÍ¬£¬²ÅÄÜ±£Ö¤ÕıÈ·µÄ´«Êä
 212   1          SPI_Write_TxFIFO(W_REGISTER + RX_ADDR_P0, TxAddr, TX_ADDR_WITDH);//Ğ´¸øNRF¸æËßËü£¬ÏÖÔÚ×¼±¸½ÓÊÜÍ¨µÀ0µÄÊı
             -¾İ
 213   1        
 214   1          /*½ÓÏÂÀ´ÉèÖÃ¸÷¸ö¼Ä´æÆ÷£¬Ê¹NRF¹¤×÷ÔÚ½ÓÊÜÄ£Ê½ÏÂ£¡*/
 215   1          SPI_Write_NRF(W_REGISTER + EN_AA, 0x01);//Ê¹ÄÜÍ¨µÀ0£¬Í¨µÀ0×Ô¶¯Ó¦´ğÔÊĞí£¬ÒªÊÇ²»ĞèÒª×Ô¶¯Ó¦´ğ£¬ÔòÖÃ0x00
 216   1          SPI_Write_NRF(W_REGISTER + EN_RXADDR, 0x01);//ÔÊĞíÍ¨µÀ0
 217   1          //µØÖ·¿í¶È£¬²»ÖªÒª²»ÒªĞ´£¬¸Ğ¾õÓ¦¸ÃÊÇÒªĞ´µÄ
 218   1          //SPI_Write_NRF(W_REGISTER + SETUP_AW, 0x03);//ÉèÖÃµØÖ·¿í¶È£¬000000XX£¬ÒòÎªÊ¹ÓÃÎå¸öµØÖ·¿í¶È£¬ËùÒÔXX = 11
             -£¬¼´0x03
 219   1          SPI_Write_NRF(W_REGISTER + RF_CH, 0x00);//ÉèÖÃÍ¨µÀÆµÂÊÊÇ0£¡£¡£¡ÊÕ·¢Ë«·½±ØĞë±£³ÖÒ»ÖÂ
 220   1          SPI_Write_NRF(W_REGISTER + RX_PW_P0,RX_DATA_WITDH);//ÉèÖÃ½ÓÊÕÍ¨µÀ0µÄÊı¾İ¿í¶È£¬¿í¶ÈĞèÒªºÍ·¢Éä¶ËÒ»Ñù¿í??
 221   1          SPI_Write_NRF(W_REGISTER + RF_SETUP, 0x07);//ÉäÆµ¼Ä´æÆ÷Ê¹ÓÃ000 0 11 1£¬²ÉÓÃ1Mbps  0dBm,
 222   1          SPI_Write_NRF(W_REGISTER + CONFIG, 0x0f);//ÉèÖÃCRC¼ìÑéÊ¹ÄÜÓĞĞ§£¬Ê®ÁùÎ»iCRCĞ£Ñé£¬ÉÏµç£¬½ÓÊÕÄ£Ê½
 223   1          CE = 1;
 224   1        
 225   1          delay_us(50);//±ØĞëÑÓ³Ù10usÒÔÉÏ£¬ÏÖÔÚÕâÀïÑÓÊ±ÁË15us
 226   1      }
 227          
 228          /*½ÓÊÕÄ£Ê½ÏÂ£¬ÅĞ¶ÏÊÇ·ñ¶ÁÈ¡µ½ÁËÊı¾İ£¬Í¨¹ıFlagÅĞ¶Ï£¬RecFlag = 1£¬ËµÃ÷ÊÕµ½ÁËÊı¾İ£¬Êı¾İ½«»á±£´æÔÚRecDataÊı×éÖĞ
             -*/
 229          unsigned char NRF_RecData(unsigned char *RecData)
 230          {
 231   1          unsigned char RecFlag = 0;
 232   1          //¶ÁÈ¡×´Ì¬¼Ä´æÆ÷£¬ÅĞ¶ÏÊÇ·ñ½ÓÊÜµ½ÁËÊı¾İ£¬½ÓÊÕµ½ÁËµÄ»°£¬»á°ÑRX_DRÖÃÒ»
 233   1          sta = SPI_Read_NRF(R_REGISTER + STATUS);
C51 COMPILER V9.53.0.0   NRF24L01_SENDER                                                   07/20/2016 14:44:22 PAGE 5   

 234   1        
 235   1        
 236   1        
 237   1          if(RX_DR == 1)//Èç¹û²úÉúÁË½ÓÊÕÖÕ¶Ë±êÖ¾Î»£¬ÔòËµÃ÷½ÓÊÕ³É¹¦
 238   1          {
 239   2      
 240   2              //ÕâÒ»¶ÎÊÇ²Î¿¼³ÌĞòÖĞËùĞ´£¬ºÃÏñÓĞÎó
 241   2              CE = 0;
 242   2              
 243   2              //²ÎÊıÒ»£ºº¯ÊıÖĞĞèÒªÊ×ÏÈ±»Ğ´ÈëµÄÃüÁî£¬×¼±¸¶ÁÈ¡Êı¾İ£¡
 244   2              //²ÎÊı¶ş£º³Ğ½ÓÊı¾İµÄÊı×é
 245   2              //²ÎÊıÈı£ºÊı×éµÄ¿í¶È£¬Ò²¾ÍÊÇÊı¾İµÄ¿í¶ÈÊÇÎå¸ö×Ö½Ú
 246   2              SPI_Read_RxFIFO(R_RX_PAYLOAD,RecData,RX_ADDR_WITDH);
 247   2              RecFlag = 1;    
 248   2              CE = 1;
 249   2          }
 250   1          //²»ÂÛÊÇ·ñÊÕµ½ÓĞĞ§Êı¾İ£¬¶¼ÒªÔÚ¶ÁÈ¡ºó£¬Çå¿ÕÖĞ¶ÏÎ»£¬ÒÔ±ãÏÂÒ»´ÎµÄ½ÓÊÕ
 251   1          //²ÎÊıÒ»£ºÇå³ıRXFIFO¼Ä´æÆ÷ÃüÁî
 252   1          SPI_Write_NRF(FLUSH_RX, 0xff);
 253   1          
 254   1      
 255   1          return RecFlag;
 256   1      }
 257          
 258          
 259          // /*·¢ËÍÊı¾İµÄ·â×°£¬°üÀ¨Ó¦´ğÒÔºóµÄ²Ù×÷*/
 260          // unsigned char sendout_data(unsigned char *Tx_data)
 261          // {
 262          //    //*SetNRF_SendDataMode ºÍ CheckAck ÕâÁ½¸öº¯Êı±ØĞëÒª¸úÔÚÒ»Æğ£¬ÒòÎªCheckAckÖĞÓĞÇå³ıÖĞ¶ÏºÍTX FIFOµÄ²Ù×÷
             -*/
 263          
 264          //    return 1;
 265          // }
 266          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    390    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
