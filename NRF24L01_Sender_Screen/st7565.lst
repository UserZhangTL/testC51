C51 COMPILER V9.53.0.0   ST7565                                                            05/21/2016 12:34:31 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE ST7565
OBJECT MODULE PLACED IN st7565.obj
COMPILER INVOKED BY: C:\Keil_MDK\C51\BIN\C51.EXE LCD12864\st7565.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\delay;.\uart;.\NRF2
                    -4L01__Sender;.\nine_key) DEBUG OBJECTEXTEND PRINT(.\st7565.lst) TABS(2) OBJECT(st7565.obj)

line level    source

   1          #include"st7565.h"
   2          
   3          /*使用范例，注意字符顺序是颠倒的，需要翻转
   4            uchar i = 128;
   5            Lcd12864_Init();
   6            Lcd12864_ClearScreen();
   7              
   8            while (1)
   9            {
  10          
  11                //Lcd12864_ClearScreen();
  12                Lcd12864_Write16CnCHAR(16, 1, "全安");
  13            }
  14            */
  15          
  16          
  17          
  18          
  19          
  20          
  21          
  22          
  23          /*******************************************************************************
  24          * 函 数 名         : LCD12864_WriteCmd
  25          * 函数功能       : 写入一个命令到12864
  26          * 输    入         : cmd
  27          * 输    出         : 无
  28          *******************************************************************************/
  29          
  30          void LcdSt7565_WriteCmd(cmd)
  31          {
  32   1        LCD12864_CS = 0;     //chip select,打开片选
  33   1        LCD12864_RD = 1;     //disable read，读失能 
  34   1        LCD12864_RS = 0;       //select command，选择命令
  35   1        LCD12864_RW = 0;       //select write，选择写模式
  36   1        _nop_();
  37   1        _nop_();
  38   1      
  39   1        DATA_PORT = cmd; //put command，放置命令
  40   1        _nop_();
  41   1        _nop_();
  42   1      
  43   1        LCD12864_RW = 1;     //command writing ，写入命令
  44   1      }
  45          
  46          /*******************************************************************************
  47          * 函 数 名         : LcdSt7565_WriteData
  48          * 函数功能       : 写入一个数据到12864
  49          * 输    入         : dat
  50          * 输    出         : 无
  51          *******************************************************************************/
  52          
  53          void LcdSt7565_WriteData(dat)
  54          { 
C51 COMPILER V9.53.0.0   ST7565                                                            05/21/2016 12:34:31 PAGE 2   

  55   1        LCD12864_CS = 0;     //chip select，打开片选
  56   1        LCD12864_RD = 1;     //disable read，读失能 
  57   1        LCD12864_RS = 1;       //select data，选择数据
  58   1        LCD12864_RW = 0;       //select write，选择写模式
  59   1        _nop_();
  60   1        _nop_();
  61   1      
  62   1        DATA_PORT = dat;       //put data，放置数据
  63   1        _nop_();
  64   1        _nop_();
  65   1      
  66   1        LCD12864_RW = 1;     //data writing，写数据 
  67   1      }
  68          /*******************************************************************************
  69          * 函 数 名         : LCD12864_Init
  70          * 函数功能       : 初始化12864
  71          * 输    入         : 无
  72          * 输    出         : 无
  73          * 说    明         : LCD12864的命令指令可以查看例程文件夹下的《ST7565p数据手册》
  74          *                  * 的第51页的位置。
  75          *******************************************************************************/
  76          
  77          void Lcd12864_Init()
  78          {
  79   1        uchar i;
  80   1        LCD12864_RSET = 0;
  81   1        for (i=0; i<100; i++);
  82   1        LCD12864_CS = 0;
  83   1        LCD12864_RSET = 1;
  84   1        
  85   1        //----------------Star Initial Sequence-------//
  86   1        //------程序初始化设置，具体命令可以看文件夹下---//
  87   1      
  88   1        //--软件初始化--//
  89   1        LcdSt7565_WriteCmd(0xE2);  //reset
  90   1        for (i=0; i<100; i++);     //延时一下
  91   1      
  92   1        //--表格第8个命令，0xA0段（左右）方向选择正常方向（0xA1为反方向）--//
  93   1        LcdSt7565_WriteCmd(0xA1);  //ADC select segment direction 
  94   1        
  95   1        //--表格第15个命令，0xC8普通(上下)方向选择选择反向，0xC0为正常方向--// 
  96   1        LcdSt7565_WriteCmd(0xC8);  //Common direction 
  97   1                          
  98   1        //--表格第9个命令，0xA6为设置字体为黑色，背景为白色---//
  99   1        //--0xA7为设置字体为白色，背景为黑色---//
 100   1        LcdSt7565_WriteCmd(0xA6);  //reverse display
 101   1      
 102   1        //--表格第10个命令，0xA4像素正常显示，0xA5像素全开--//
 103   1        LcdSt7565_WriteCmd(0xA4);  //normal display
 104   1        
 105   1        //--表格第11个命令，0xA3偏压为1/7,0xA2偏压为1/9--//
 106   1        LcdSt7565_WriteCmd(0xA2);  //bias set 1/9
 107   1        
 108   1        //--表格第19个命令，这个是个双字节的命令，0xF800选择增压为4X;--//
 109   1        //--0xF801,选择增压为5X，其实效果差不多--// 
 110   1        LcdSt7565_WriteCmd(0xF8);  //Boost ratio set
 111   1        LcdSt7565_WriteCmd(0x01);  //x4
 112   1        
 113   1        //--表格第18个命令，这个是个双字节命令，高字节为0X81，低字节可以--//
 114   1        //--选择从0x00到0X3F。用来设置背景光对比度。---/
 115   1        LcdSt7565_WriteCmd(0x81);  //V0 a set
 116   1        LcdSt7565_WriteCmd(0x23);
C51 COMPILER V9.53.0.0   ST7565                                                            05/21/2016 12:34:31 PAGE 3   

 117   1      
 118   1        //--表格第17个命令，选择调节电阻率--//
 119   1        LcdSt7565_WriteCmd(0x25);  //Ra/Rb set
 120   1        
 121   1        //--表格第16个命令，电源设置。--//
 122   1        LcdSt7565_WriteCmd(0x2F);
 123   1        for (i=0; i<100; i++);
 124   1      
 125   1        //--表格第2个命令，设置显示开始位置--//
 126   1        LcdSt7565_WriteCmd(0x40);  //start line
 127   1      
 128   1        //--表格第1个命令，开启显示--//
 129   1        LcdSt7565_WriteCmd(0xAF);  // display on
 130   1        for (i=0; i<100; i++);
 131   1      
 132   1      }
 133          
 134          /*******************************************************************************
 135          * 函 数 名         : LCD12864_ClearScreen
 136          * 函数功能       : 清屏12864
 137          * 输    入         : 无
 138          * 输    出         : 无
 139          *******************************************************************************/
 140          
 141          void Lcd12864_ClearScreen(void)
 142          {
 143   1        uchar i, j;
 144   1      
 145   1        for(i=0; i<8; i++)
 146   1        {
 147   2          //--表格第3个命令，设置Y的坐标--//
 148   2          //--Y轴有64个，一个坐标8位，也就是有8个坐标--//
 149   2          //所以一般我们使用的也就是从0xB0到0x07,就够了--// 
 150   2          LcdSt7565_WriteCmd(0xB0+i); 
 151   2      
 152   2          //--表格第4个命令，设置X坐标--//
 153   2          //--当你的段初始化为0xA1时，X坐标从0x10,0x04到0x18,0x04,一共128位--//
 154   2          //--当你的段初始化为0xA0时，X坐标从0x10,0x00到0x18,0x00,一共128位--//
 155   2          //--在写入数据之后X坐标的坐标是会自动加1的，我们初始化使用0xA0所以--//
 156   2          //--我们的X坐标从0x10,0x00开始---//
 157   2          LcdSt7565_WriteCmd(0x10); 
 158   2          LcdSt7565_WriteCmd(0x04);                
 159   2          
 160   2          //--X轴有128位，就一共刷128次，X坐标会自动加1，所以我们不用再设置坐标--//
 161   2          for(j=0; j<128; j++)
 162   2          {
 163   3            LcdSt7565_WriteData(0x00);  //如果设置背景为白色时，清屏选择0XFF
 164   3          }
 165   2        }
 166   1      }
 167          
 168          /*******************************************************************************
 169          * 函 数 名         : LCD12864_Write16CnCHAR
 170          * 函数功能       : 在12864上面书写16X16的汉字
 171          * 输    入         : x, y, cn
 172          * 输    出         : 无
 173          * 说    明       : 该函数可以直接书写字符串，但是书写是从右到左，所以输入的时
 174          *                  * 侯注意输入。汉字的取模方式请观看文件夹下的《汉字取模软件的
 175          *                  * 使用说明》
 176          *******************************************************************************/
 177          
 178          #ifdef  CHAR_CODE
C51 COMPILER V9.53.0.0   ST7565                                                            05/21/2016 12:34:31 PAGE 4   

 179          
 180          #include"charcode.h"
 181          
 182          uchar Lcd12864_Write16CnCHAR(uchar x, uchar y, uchar *cn)
 183          {
 184   1        uchar j, x1, x2, wordNum;
 185   1      
 186   1        //--Y的坐标只能从0到7，大于则直接返回--//
 187   1        if(y > 7)
 188   1        {
 189   2          return 0;
 190   2        }
 191   1      
 192   1        //--X的坐标只能从0到128，大于则直接返回--//
 193   1        if(x > 128)
 194   1        {
 195   2          return 0;
 196   2        }
 197   1        y += 0xB0;     //求取Y坐标的值
 198   1        //--设置Y坐标--//
 199   1        LcdSt7565_WriteCmd(y);
 200   1        while ( *cn != '\0')   //在C语言中字符串结束以‘\0’结尾
 201   1        { 
 202   2        
 203   2          //--设置Y坐标--//
 204   2          LcdSt7565_WriteCmd(y);
 205   2      
 206   2          x1 = (x >> 4) & 0x0F;   //由于X坐标要两句命令，分高低4位，所以这里先取出高4位
 207   2          x2 = x & 0x0F;          //去低四位
 208   2          //--设置X坐标--//
 209   2          LcdSt7565_WriteCmd(0x10 + x1);   //高4位
 210   2          LcdSt7565_WriteCmd(0x04 + x2);  //低4位
 211   2      
 212   2          for (wordNum=0; wordNum<50; wordNum++)
 213   2          {
 214   3              //--查询要写的字在字库中的位置--//
 215   3            if ((CN16CHAR[wordNum].Index[0] == *cn)
 216   3                 &&(CN16CHAR[wordNum].Index[1] == *(cn+1)))
 217   3            {
 218   4              for (j=0; j<32; j++) //写一个字
 219   4              {   
 220   5                if (j == 16)   //由于16X16用到两个Y坐标，当大于等于16时，切换坐标
 221   5                {
 222   6                  //--设置Y坐标--//
 223   6                    LcdSt7565_WriteCmd(y + 1);
 224   6            
 225   6                  //--设置X坐标--//
 226   6                  LcdSt7565_WriteCmd(0x10 + x1);   //高4位
 227   6                  LcdSt7565_WriteCmd(0x04 + x2);  //低4位
 228   6                }
 229   5                LcdSt7565_WriteData(CN16CHAR[wordNum].Msk[j]);
 230   5              }
 231   4              x += 16;
 232   4            }//if查到字结束   
 233   3          } //for查字结束 
 234   2          cn += 2;
 235   2        } //while结束
 236   1        return 1;
 237   1      }
 238          
 239          #endif
 240          
C51 COMPILER V9.53.0.0   ST7565                                                            05/21/2016 12:34:31 PAGE 5   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    401    ----
   CONSTANT SIZE    =   1598    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
